# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install numpy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
        # python3

import sys
import threading
import numpy
    
class Node:
    def __init__(self, data):
        self.data = data
        self.children = []
      
def find_height(n, parent):
    nodes = [Node(i) for i in range (n)]
    root = None
        
    for i in range(n):
        if parent[i] == -1:
            root = nodes[i]
        else:
            parent_node = nodes[parent[i]]
            parent_node.children.append(nodes[i])
                
    max_height = 0
    queue = [(root, 1)]
    
    while queue:
        node, level = queue.pop(0)
        if level > max_height:
            max_height = level
        for child in node.children:
            queue.append((child, level + 1))
    return max_height

def main():
    input_type = input()
    if input_type == "i":
        n = int(input())
        parent = list(map(int, input().split()))
        height = find_height(n, parent)
        print(height)
       
    elif input_type == "F":
        file_name = input()
        while 'a' in file_name:
            print("File name cannot contain 'a'")
            file_name = input()
        file_path = "./tree-height-from-empty-KristersRicardsAunins/test/" + file_name
        
        with open(file_path) as f:
            n = int(f.readline().strip())
            parent = list(map(int, f.readline().strip().split()))
            height = find_height(n, parent)
            print(height)
           
    pass

if __name__ == '__main__':
    sys.setrecursionlimit(10**7)
    threading.stack_size(2**27)
    threading.Thread(target=main).start()
